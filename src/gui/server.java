/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import chat.Chat;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.*;
import commoms.enums.*;
import static commoms.enums.Action.DISCONNECT;
import static commoms.enums.Action.GET_USERS_ONLINE;
import commoms.request.*;
import commoms.response.*;
import controller.serverInfor;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import lombok.Getter;
import lombok.Setter;
import org.apache.commons.lang3.ObjectUtils;

/**
 *
 * @author Xuyen
 */
public class server extends javax.swing.JFrame implements Runnable {
    
    public ServerSocket serverSocket = null;
    private Map<String, ClientHandler> clientHandlers;
    private serverInfor serverinfor;
    public int portset;

    /**
     * Creates new form server
     */
    public server(int port) throws IOException {
        this.clientHandlers = new HashMap<>();
        initComponents();
        setServer();
        jTFport.requestFocus();
        jPanel1.setVisible(false);
        this.portset = port;
        if (port != -1) {
            openServerbyClient(port);
        }
    }
    
    public void openServerbyClient(int port) throws IOException {
        serverSocket = new ServerSocket(port);
        int p = serverSocket.getLocalPort();
        String hostname = serverSocket.getInetAddress().getHostName();
        String servername = jTFServername.getText();
        serverinfor = new serverInfor(p, servername, hostname);
        Chat.listServer.add(serverinfor);
        Thread t = new Thread(this);
        t.start();
        this.portset = p;
        Chat.Serverl.add(this);
        //this.start(Integer.parseInt(port));
        setInfor();
        jLbHostname.setText(hostname);
        jPanel1.setVisible(true);
        jTFport.setEnabled(false);
        btnOpen.setEnabled(false);
        btnClose.setEnabled(true);
    }
    
    public void setServer() {
        int n = Chat.listServer.size();
        jTFServername.setEnabled(false);
        jTFServername.setText("Server" + String.valueOf(n + 1));
        btnClose.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTFServername = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTFport = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnOpen = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListUseronline = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jPninfor = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLBServername = new javax.swing.JLabel();
        jLbHostname = new javax.swing.JLabel();
        jLbport = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTFServername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFServernameActionPerformed(evt);
            }
        });
        jTFServername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTFServernameKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Name server:");

        jTFport.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTFport.setToolTipText("Port between 3000 and 9000");
        jTFport.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTFportKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Port:");

        btnOpen.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnOpen.setText("Open");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        btnClose.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        jListUseronline.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jScrollPane1.setViewportView(jListUseronline);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("User Online:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Th√¥ng tin chung");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel5.setText("Name Server:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel7.setText("HostName:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel8.setText("Port:");

        jLBServername.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLBServername.setText("jLabel9");

        jLbHostname.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLbHostname.setText("jLabel10");

        jLbport.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLbport.setText("jLabel11");

        javax.swing.GroupLayout jPninforLayout = new javax.swing.GroupLayout(jPninfor);
        jPninfor.setLayout(jPninforLayout);
        jPninforLayout.setHorizontalGroup(
            jPninforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPninforLayout.createSequentialGroup()
                .addGroup(jPninforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPninforLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel4))
                    .addGroup(jPninforLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPninforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(jPninforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLbport)
                            .addComponent(jLbHostname)
                            .addComponent(jLBServername))))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        jPninforLayout.setVerticalGroup(
            jPninforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPninforLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(jPninforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLBServername))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPninforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLbHostname))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPninforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLbport))
                .addContainerGap(108, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPninfor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPninfor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnExit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTFServername, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTFport, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(94, 94, 94)
                        .addComponent(btnOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(296, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExit)
                        .addGap(28, 28, 28))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(btnExit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnClose, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(btnOpen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTFport)
                    .addComponent(jTFServername))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTFServernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFServernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFServernameActionPerformed

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        try {
            // TODO add your handling code here:
            openServer();
        } catch (IOException ex) {
            Logger.getLogger(server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        try {
            // TODO add your handling code here:
            closeServer();
        } catch (IOException ex) {
            Logger.getLogger(server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCloseActionPerformed

    private void jTFServernameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFServernameKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFServernameKeyReleased

    private void jTFportKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFportKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) {
            try {
                openServer();
            } catch (IOException ex) {
                Logger.getLogger(server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jTFportKeyReleased

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed
    private class closeServerDM implements Runnable {
        
        @Override
        public void run() {
            for (String id : clientHandlers.keySet()) {
                ClientHandler cl = clientHandlers.get(id);
                if (cl != null) {
                    CloseServerResponse user = new CloseServerResponse(id, Statuscode.OK);
                    try {
                        cl.response(user);
                    } catch (IOException ex) {
                        Logger.getLogger(server.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                }
            }
            if (serverSocket != null) {
                try {
                    serverSocket.close();
                } catch (IOException ex) {
                    Logger.getLogger(server.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    
    public void closeServer() throws IOException {
        Thread t = new Thread(new closeServerDM());
        t.start();
        Chat.listServer.remove(serverinfor);
        Chat.Serverl.remove(this);
        btnOpen.setEnabled(true);
        btnExit.setEnabled(true);
        jTFport.setEnabled(true);
        jTFport.setText("");
        jPanel1.setVisible(false);
    }
    
    public void openServer() throws IOException {
        String port = jTFport.getText();
        if (port.length() == 0) {
            JOptionPane.showMessageDialog(null, "Port is empty!");
            return;
        }
        boolean isNumeric = (port != null && port.matches("[0-9]+"));
        if (!isNumeric) {
            JOptionPane.showMessageDialog(null, "Port is numberic!");
            return;
        }
        int pp = Integer.parseInt(port);
        if (pp < 3000 || pp > 9000) {
            JOptionPane.showMessageDialog(null, "Port between 3000 and 9000!");
            return;
        }
        for (serverInfor s : Chat.listServer) {
            if (pp == s.getPort()) {
                JOptionPane.showMessageDialog(null, "Server with this port exists!");
                return;
            }
        }
        serverSocket = new ServerSocket(pp);
        int p = serverSocket.getLocalPort();
        String hostname = serverSocket.getInetAddress().getHostName();
        String servername = jTFServername.getText();
        serverinfor = new serverInfor(p, servername, hostname);
        Chat.listServer.add(serverinfor);
        Thread t = new Thread(this);
        t.start();
        this.portset = p;
        Chat.Serverl.add(this);
        //this.start(Integer.parseInt(port));
        setInfor();
        jLbHostname.setText(hostname);
        jPanel1.setVisible(true);
        jTFport.setEnabled(false);
        btnOpen.setEnabled(false);
        btnExit.setEnabled(false);
        btnClose.setEnabled(true);
    }
    
    public void setUserOnlinetoGUI(List<String> user) {
        int n = user.size();
        if (n == 0) {
            jListUseronline.setModel(new javax.swing.AbstractListModel<String>() {
                String[] strings = new String[0];
                
                public int getSize() {
                    return strings.length;
                }
                
                public String getElementAt(int i) {
                    return strings[i];
                }
            });
        }
        String[] listUseronline = new String[n];
        for (int i = 0; i < n; i++) {
            listUseronline[i] = user.get(i);
        }
        jListUseronline.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = listUseronline;
            
            public int getSize() {
                return strings.length;
            }
            
            public String getElementAt(int i) {
                return strings[i];
            }
        });
    }
    
    @Override
    public void run() {
        //start(ABORT);
        System.out.println("Server starting!!!");
        try {
            while (true) {
                ClientHandler clientHandler = new ClientHandler(serverSocket.accept());
                clientHandler.start();
                this.clientHandlers.put(clientHandler.getUid(), clientHandler);
                setUserOnlinetoGUI(getUserNameOnline());
//                for(String user :getUserNameOnline()){
//                    System.out.println(user);
//                }

            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (serverSocket != null) {
                    serverSocket.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        
    }
    
    public void setInfor() {
//        String port = jTFport.getText();
//        int p = Integer.parseInt(port);
        jLBServername.setText(jTFServername.getText());
        jLbport.setText(String.valueOf(this.portset));
        
    }
    
    public server(JButton jButton1, JButton jButton2, JLabel jLBServername, JLabel jLabel1, JLabel jLabel2, JLabel jLabel3, JLabel jLabel4, JLabel jLabel5, JLabel jLabel7, JLabel jLabel8, JLabel jLbHostname, JLabel jLbport, JList<String> jList1, JPanel jPanel1, JPanel jPninfor, JScrollPane jScrollPane1, JTextField jTFServername, JTextField jTFport, GraphicsConfiguration gc) {
        super(gc);
        this.btnOpen = jButton1;
        this.btnClose = jButton2;
        this.jLBServername = jLBServername;
        this.jLabel1 = jLabel1;
        this.jLabel2 = jLabel2;
        this.jLabel3 = jLabel3;
        this.jLabel4 = jLabel4;
        this.jLabel5 = jLabel5;
        this.jLabel7 = jLabel7;
        this.jLabel8 = jLabel8;
        this.jLbHostname = jLbHostname;
        this.jLbport = jLbport;
        this.jListUseronline = jList1;
        this.jPanel1 = jPanel1;
        this.jPninfor = jPninfor;
        this.jScrollPane1 = jScrollPane1;
        this.jTFServername = jTFServername;
        this.jTFport = jTFport;
    }
    
    public server(JButton jButton1, JButton jButton2, JLabel jLBServername, JLabel jLabel1, JLabel jLabel2, JLabel jLabel3, JLabel jLabel4, JLabel jLabel5, JLabel jLabel7, JLabel jLabel8, JLabel jLbHostname, JLabel jLbport, JList<String> jList1, JPanel jPanel1, JPanel jPninfor, JScrollPane jScrollPane1, JTextField jTFServername, JTextField jTFport) throws HeadlessException {
        this.btnOpen = jButton1;
        this.btnClose = jButton2;
        this.jLBServername = jLBServername;
        this.jLabel1 = jLabel1;
        this.jLabel2 = jLabel2;
        this.jLabel3 = jLabel3;
        this.jLabel4 = jLabel4;
        this.jLabel5 = jLabel5;
        this.jLabel7 = jLabel7;
        this.jLabel8 = jLabel8;
        this.jLbHostname = jLbHostname;
        this.jLbport = jLbport;
        this.jListUseronline = jList1;
        this.jPanel1 = jPanel1;
        this.jPninfor = jPninfor;
        this.jScrollPane1 = jScrollPane1;
        this.jTFServername = jTFServername;
        this.jTFport = jTFport;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new server(-1).setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(server.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

/////////////Server start
    private List<String> getUserIdOnline() {
        return this.clientHandlers.values().stream()
                .map(ClientHandler::getUid)
                .collect(Collectors.toList());
    }
    
    private List<String> getUserNameOnline() {
        return this.clientHandlers.values().stream()
                .map(ClientHandler::getUsername)
                .collect(Collectors.toList());
    }
    
    private List<String> getUserIdOnline(String me) {
        List<String> dm = this.clientHandlers.values().stream()
                .map(ClientHandler::getUid)
                .collect(Collectors.toList());
        dm.remove(me);
        return dm;
        
    }
    
    private List<String> getUserNameOnline(String me) {
        List<String> dm = this.clientHandlers.values().stream()
                .map(ClientHandler::getUsername)
                .collect(Collectors.toList());
        dm.remove(me);
        return dm;
        
    }
    
    private Map<String, String> getMapUserIdOnline(String me) {
        Map<String, String> dmList = new HashMap<>();
        List<String> idList = this.clientHandlers.values().stream()
                .map(ClientHandler::getUid)
                .collect(Collectors.toList());
        List<String> username = this.clientHandlers.values().stream()
                .map(ClientHandler::getUsername)
                .collect(Collectors.toList());
        for (int i = 0; i < username.size(); i++) {
            dmList.put(idList.get(i), username.get(i));
        }
        dmList.remove(me);
        return dmList;
    }
    
    public void pushUsername() {
        
    }
//Tham kh·∫£o va Custom

    private class ClientHandler extends Thread {
        
        private Socket clientSocket;
        private ObjectInputStream in;
        private ObjectOutputStream out;
        private String uid;
        private String username;
        
        public Socket getClientSocket() {
            return clientSocket;
        }
        
        public String getUsername() {
            return username;
        }
        
        public String getUid() {
            return uid;
        }
        
        public ObjectInputStream getIn() {
            return in;
        }
        
        public ObjectOutputStream getOut() {
            return out;
        }
        
        public void setClientSocket(Socket clientSocket) {
            this.clientSocket = clientSocket;
        }
        
        public void setIn(ObjectInputStream in) {
            this.in = in;
        }
        
        public void setOut(ObjectOutputStream out) {
            this.out = out;
        }
        
        public void setUid(String uid) {
            this.uid = uid;
        }
        
        public ClientHandler(Socket socket) throws IOException {
            this.clientSocket = socket;
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            in = new ObjectInputStream(clientSocket.getInputStream());
            this.uid = UUID.randomUUID().toString();
            this.username = this.uid;
        }
        
        private void response(Response response) throws IOException {
            if (response == null) {
                return;
            }
            this.out.writeObject(response);
            this.out.flush();
        }
        
        @Override
        public void run() {
            try {
                while (true) {
                    Object input = in.readObject();
                    if (ObjectUtils.isNotEmpty(input)) {
                        Request request = (Request) input;
                        switch (request.getAction()) {
                            case SEND_FILE: {
                                SendFileRequest groupMessageRequest = (SendFileRequest) request;
                                
                                System.out.println(groupMessageRequest.getContent().length);
                                for (String s : groupMessageRequest.getUids()) {
                                    ClientHandler clientHandler = clientHandlers.get(s);
                                    if (clientHandler != null) {
                                        ReceiveFileResponse receiveFileResponse=
                                                new ReceiveFileResponse(groupMessageRequest.getFileName(), 
                                                        groupMessageRequest.getGroupList(), groupMessageRequest.getContent(), Statuscode.OK, this.uid);
                                        clientHandler.response(receiveFileResponse);
                                      
//                                        clientHandler.response(ReceiveFileResponse.builder()
//                                                .senderId(this.getUid())
//                                                .groupList(groupMessageRequest.getGroupList())
//                                                .fileName(groupMessageRequest.getFileName())
//                                                .content(groupMessageRequest.getContent())
//                                                .statusCode(Statuscode.OK)
//                                                .build());
                                    }
                                }
                                break;
                            }
                            case GET_ID: {
                                this.response(GetIDResponse.builder()
                                        .myid(this.uid)
                                        .statusCode(Statuscode.OK)
                                        .build());
                                break;
                            }
                            case GET_USERS_ONLINE: {
                                UserOnlineResponse user = new UserOnlineResponse(getUserIdOnline(uid), getUserNameOnline(uid), Statuscode.OK);
                                this.response(user);
                                break;
                            }
                            case SET_USERNAME: {
                                
                                this.username = ((setUsernameRequest) (request)).getUsername();
                                setUserOnlinetoGUI(getUserNameOnline());
                                for (String id : clientHandlers.keySet()) {
                                    ClientHandler cl = clientHandlers.get(id);
                                    if (cl != null) {
                                        UserOnlineResponse user = new UserOnlineResponse(getUserIdOnline(cl.uid), getUserNameOnline(cl.username), Statuscode.OK);
                                        cl.response(user);
                                        
                                    }
                                }
                                break;
                            }
                            case CHAT_ALL: {
                                GroupMessageRequest groupMessageRequest = (GroupMessageRequest) request;
                                for (String s : groupMessageRequest.getUids()) {
                                    ClientHandler clientHandler = clientHandlers.get(s);
//                                    System.out.println();
                                    if (clientHandler != null) {
                                        clientHandler.response(MessageResponse.builder()
                                                .senderId(this.getUid())
                                                .group(groupMessageRequest.getGroupList())
                                                .message(groupMessageRequest.getMessage())
                                                .statusCode(Statuscode.OK)
                                                .build());
                                    }
                                }
                                break;
                            }
                            case DISCONNECT: {
                                clientHandlers.remove(this.getUid());
                                setUserOnlinetoGUI(getUserNameOnline());
                                for (String id : clientHandlers.keySet()) {
                                    ClientHandler cl = clientHandlers.get(id);
                                    if (cl != null) {
                                        UserOnlineResponse user = new UserOnlineResponse(getUserIdOnline(cl.uid), getUserNameOnline(cl.username), Statuscode.OK);
                                        cl.response(user);
                                    }
                                }
                                break;
                            }
                            default:
                                break;
                        }
                    }
                    
                }
            } catch (IOException | ClassNotFoundException e) {
                e.printStackTrace();
            } finally {
                
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnOpen;
    private javax.swing.JLabel jLBServername;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLbHostname;
    private javax.swing.JLabel jLbport;
    private javax.swing.JList<String> jListUseronline;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPninfor;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFServername;
    private javax.swing.JTextField jTFport;
    // End of variables declaration//GEN-END:variables
}
